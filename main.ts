import * as parseArgs from 'minimist';
import * as path from 'path';
import {refineArgs, packAndVerify} from './packverify';

var aliases = {
  '?':"help", p:"package.json", o:"test-folder", s:"test-script",
  r:"replace-import", replace:"replace-import", R:"rmdir"
};
var args = parseArgs(process.argv, {alias:aliases});
Object.keys(aliases).forEach(a => delete args[a]);

if (args.help) {
  console.log(`Usage: ${path.basename(process.argv[0], 'exe')} ${path.basename(process.argv[1], 'js')} [Options] [<Test patterns>]
  Verifies that npm package is packaged properly by testing the packaged
  version against your unit tests in a special test folder.
  
  <Test patterns> are glob patterns used to recognize source files 
  that are test-related and so should be copied to the new project. 
  The default test patterns are \`test* *test.* *tests.* *test*/*\`
  
  1. Runs \`npm pack\` to create a preview copy of your package.
  2. Creates a test folder (default: .packverify) in which a new package.json
     file derived from your existing one is created, in which all
     dependencies are deleted except for common unit test frameworks 
     (e.g. jasmine, mocha, jest, tape). Using \`--package.json\` you can 
     request additional changes to the new package.json file.
  3. Runs \`npm install\`
  4. Installs any additional packages requested with \`--install\`
  5. Unpacks the tgz file generated by \`npm pack\` using \`npm install\`
  6. Copies test files (test*,*test.*,*tests.*,*test*/*) to the folder,
     preserving the original directory structure.
  7. Changes import/require commands in the tests according to --replace
  8. Runs \`npm run test\` (or another script according to \`--test-script\`)
  9. Deletes node_modules in the test folder to avoid biasing future results

  Options:
  -p, --package.json=key:value
        Puts data into the new package.json file. The value is eval'd and
        so may be code. If the key already exists, its value is replaced.
        Use \`undefined\` to delete an existing value.
  -p, --package.json=+key:value  
        Merges data into the new package.json file. If the new value is a 
        primitive, it overwrites the old value. If the old value is a 
        primitive, it is treated as an array. If both are arrays, they are
        concatenated. If either one is an object, they are merged in the 
        obvious way, recursively. For example:
          Old value: \`{"a":["hi"], "b":7, "c":[3], "x":{"D":4}}\`
          New value: \`{"a":1,"b":[8],"c":[4],"x":{"D":{"two":2},"E":5}}\`
          Out: \`{"a":1,"b":[7,8],"c":[3,4],"x":{"D":{"0":4,"two":2},"E":5}}\`
  -o, --test-folder=path
        Path to test folder. Created if necessary.
  -r, --replace-import pat1=pat2
        Searches js/mjs/ts/tsx test files for require/import commands using 
        glob pattern 1, replacing it with pattern 2. If --replace is not
        used then all paths that start with \`./\` are replaced with a path
        that does not start with \`./\`, except files that seem to be tests
        according to --tests.
  --regex ext/regex/
        For the purpose of --replace, files with the specified extension are
        searched using this regular expression, and the first captured group
        is treated as the filename to which --replace applies. For example, 
        this built-in regex is used to match require commands that use 
        double quotes:
          --regex js/require("((?:[^\\"]|\\.)*)")/
        You can specify multiple extensions separated by commas: \`js,mjs\`
  -R, --rmdir
        Remove entire test folder when done (by default, only the contents
        of node_modules and the tgz from \`npm pack\` is deleted.)
  -s, --test-script=name
        Name of test script to run with \`npm run\` (default: \`test\`).
  --install package
        Runs \`npm install --save-dev package\` in the test project.
  --keep package
        Prevents removal of package(s) from dependencies or devDependencies.
  --prepacked=file
        Instead of running \`npm pack\`, the specified tar.gz file is unpacked.
  --show-json
        Shows the JSON equivalent to the specified arguments, and quits.
  `);
} else if (args['show-json']) {
  console.log(JSON.stringify(refineArgs(args), undefined, 2));
} else {
  try {
    args = 
    packAndVerify(refineArgs(args));
  } catch(err) {
    console.log("*** ERROR ***");
    console.log(err);
  }
}
