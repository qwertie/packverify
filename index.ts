import * as parseArgs from 'minimist';
import * as path from 'path';
import {refineOptions, testPack} from './testpack';
import * as glob from 'glob';

var aliases = {
  '?':"help", p:"packagejson", o:"test-folder", s:"test-script",
  r:"replace-import", replace:"replace-import", R:"rmdir", '!':"ignore"
};
var args = parseArgs(process.argv.slice(2), {alias:aliases});
Object.keys(aliases).forEach(a => delete args[a]);

if (args.help) {
  console.log(`Usage: testpack [Options] [<Test patterns>]
  Verifies that npm package is packaged properly by testing the packaged
  version against your unit tests in a special test folder.
  
  <Test patterns> are glob patterns used to recognize source files that are
  test-related and so should be copied to the new project. The default test
  patterns are \`test* *test.* *tests.* *test*/*\`. Note: the glob package
  is used to match test patterns. It requires slash (/) as the path separator
  even on Windows; backslashes escape "special" characters such as braces.
  
  1. Runs \`npm pack\` to create a preview copy of your package.
  2. Creates a test folder (default: .packverify) in which a new package.json
     file derived from your existing one is created, in which all
     dependencies are deleted except for common unit test frameworks 
     (e.g. jasmine, mocha, jest, tape). Using \`--package.json\` you can 
     request additional changes to the new package.json file.
  3. Runs \`npm install\`
  4. Installs any additional packages requested with \`--install\`
  5. Unpacks the tgz file generated by \`npm pack\` using \`npm install\`
  6. Copies test files (test*,*test.*,*tests.*,*test*/*) to the folder,
     preserving the original directory structure.
  7. Changes import/require commands in the tests according to --replace
  8. Runs \`npm run test\` (or another script according to \`--test-script\`)
  9. Deletes node_modules in the test folder to avoid biasing future results

  Options:
  -p, --packagejson=key:value
        Puts data into the new package.json file. The value is eval'd and
        so may be code. If the key already exists, its value is replaced.
        Use \`undefined\` to delete an existing value.
  -p, --packagejson=+key:value  
        Merges data into the new package.json file. If the new value is a 
        primitive, it overwrites the old value. If the old value is a 
        primitive, it is treated as an array. If both are arrays, they are
        concatenated. If either one is an object, they are merged in the 
        obvious way, recursively. For example:
          Old value: \`{"a":["hi"], "b":7, "c":[3], "x":{"D":4}}\`
          New value: \`{"a":1,"b":[8],"c":[4],"x":{"D":{"two":2},"E":5}}\`
          Out: \`{"a":1,"b":[7,8],"c":[3,4],"x":{"D":{"0":4,"two":2},"E":5}}\`
  -o, --test-folder=path
        Path to test folder. Created if necessary.
  -r, --replace-import /pat1/pat2/
        Searches js/mjs/ts/tsx test files for require/import commands using 
        regex pattern 1, replacing it with pattern 2. If --replace-import is 
        not used then all paths that start with \`./\` are replaced with a 
        path that does not start with \`./\`, except files that seem to be 
        tests according to --tests. UTF-8 encoding is assumed.
  --regex ext/regex/
        For the purpose of modifying import/require commands, files with the
        specified extension(s) are searched using this regular expression,
        and the first captured group is treated as a filename that may need 
        to be modified. For example, this built-in regex is used to match
        require commands that use double quotes:
          --regex js/require\s*\(\s*"((?:[^\\"]|\\.)*)"/
        You can specify multiple extensions separated by commas: \`js,mjs\`
  -R, --rmdir
        Remove entire test folder when done (by default, only the contents
        of node_modules and the tgz from \`npm pack\` is deleted.)
  -s, --test-script=name
        Name of test script to run with \`npm run\` (default: \`test\`).
  --install package
        Runs \`npm install --save-dev package\` in the test project.
  --keep package
        Prevents removal of package(s) from dependencies or devDependencies.
  --prepacked=file
        Instead of running \`npm pack\`, the specified tar.gz file is unpacked.
        This option also prevents the deletion of the tar.gz file on exit.
  --show-json
        Shows the JSON equivalent of the specified arguments, then quits.
        You can put these settings in a "packtest" section of package.json.
  -!, --ignore pattern
        Ignores the specified files (glob pattern) when searching for tests.
  `);
} else if (args['show-json']) {
  delete args['show-json'];
  console.log(JSON.stringify({ packtest: refineOptions(args) }, undefined, 2));
} else {
  try {
    if (args._.length === 0)
      args._ = ["*test*/*", "test*", "*test.*", "*tests.*"];
    console.log(args);
    console.log(glob.sync("{}", {nodir:true}));
  } catch(err) {
    console.log("*** ERROR ***");
    console.log(err);
  }
}
